#!/bin/bash

INSTALLDIR=/path/to/dtmrepo/installdir
export PATH=${INSTALLDIR}/bin:${PATH}

CONFIG=${INSTALLDIR}/etc/dtmrepo.conf
LOCKDIR="/var/lock"
LOCKWAIT=30
YUMLOCKFILE="/var/run/yum.pid"
ENTITLEMENTCERTDIR="/etc/pki/entitlement"
YUMREPOSDIR="/etc/yum.repos.d"
RHNSYSCONFIGDIR="/etc/sysconfig/rhn"
RHSMREPO="redhat.repo"
REDHATREPO="redhat-dtmrepo.repo"
ISREGISTERED="Current"

LOCALMARKER="local:"
SPACEWALKMARKER="swalk:"

usage() {
    echo
    cat <<USAGE
Usage: $(basename $0) [-acdefgikprsuvx]
    -a: sync all packages in a repo
    -c: clean up
    -d: <distro,...>
    -e: enroll/register with spacewalk (requires -d)
    -f: force the operation
    -g: generate repodata
    -i: initialise and subscribe to RHSM
    -k: <activation key> for spacewalk registration (implies -e)
    -p: purge undeclared repo directories
    -r: <repo,...>
    -s: <pkg,...>
    -u: update
    -v: verbose
    -x: automatically fix subscription problems

Read instructions.txt for details.
USAGE
    exit 1
}

readconf() {
    _CONF=$1
    _SECTION=$2

    python - <<READCONF

import ConfigParser
import sys

parser = ConfigParser.SafeConfigParser()

try:
    parser.read("${_CONF}")
except:
    sys.stderr.write('Error reading %s.\n' % "${_CONF}")
    sys.exit(1)

try:
    opts = parser.items("${_SECTION}")
except:
    sys.stderr.write('Missing section %s in %s.\n' % ("${_SECTION}","${_CONF}"))
    sys.exit(1)

for opt,val in opts:
    print '%s=%s' % (opt, val)

READCONF
}

repoconf() {
    _CONF=$1

    python - <<REPOCONF
import ConfigParser
import sys

parser = ConfigParser.SafeConfigParser()

try:
    parser.read("${_CONF}")
except:
    sys.stderr.write('Error reading %s.\n' % "${_CONF}")
    sys.exit(1)

try:
    control_opts = parser.items('control')
except:
    sys.stderr.write('Missing [control] section in %s.\n' % "${_CONF}")
    sys.exit(1)

try:
    repolist = parser.items('repos')
except:
    sys.stderr.write('Missing [repos] section in %s.\n' % "${_CONF}")
    sys.exit(1)

for opt,val in control_opts:
    print '%s=%s' % (opt, val)

opts=[]
vals=[]
for opt,val in repolist:
    opts.append(opt)
    vals.append(val)

print 'repostore=(%s)' % ' '.join(opts)
print 'reponame=(%s)' % ' '.join(vals)

REPOCONF
}

fix_cert() {
    \rm ${ENTITLEMENTCERTDIR}/* &> /dev/null
    subscription-manager refresh
}

configure_redhat_repo() {
    subscription-manager config --rhsm.manage_repos=1
    subscription-manager repos
    \mv ${YUMREPOSDIR}/${RHSMREPO} ${YUMREPOSDIR}/${REDHATREPO}
    subscription-manager config --rhsm.manage_repos=0
    sed -i -e 's/\$releasever/\$YUM0/g' -e 's/\$basearch/\$YUM1/g' ${YUMREPOSDIR}/${REDHATREPO}

    if [ ! -z "${REPOSDIR}" ]; then
        ln -sf ${YUMREPOSDIR}/${REDHATREPO} ${REPOSDIR}/${REDHATREPO}
        if [ "$?" -ne 0 ]; then
            echo "Could not create symlink ${REPOSDIR}/${REDHATREPO}. Aborting."
            exit 1
        else
            yum-config-manager -c ${yumconf} --disable \* &> /dev/null
        fi
    fi
}

sanity_check() {
    SUBSERROR=0
    REPOERROR=0
    CERTERROR=0

    if [ "${subscribed}" -ne 1 ]; then
        [ -L ${REPOSDIR}/${REDHATREPO} ] && \rm ${REPOSDIR}/${REDHATREPO}

    else
        SMSTATUS=$(subscription-manager status|grep 'Overall Status'|awk '{print $NF}')
        [ "${SMSTATUS}" != "${ISREGISTERED}" ] && SUBSERROR=1
        [  ! -e "${YUMREPOSDIR}/${REDHATREPO}" ] && REPOERROR=1

        ls ${ENTITLEMENTCERTDIR}/*.pem &> /dev/null
        [ "$?" -ne 0 ] && CERTERROR=1
    fi

    [ "${SUBSERROR}" -eq 1 ] && echo "Subscription manager is set to active in ${CONFIG} but the system is not registered."
    [ "${REPOERROR}" -eq 1 ] && echo "${YUMREPOSDIR}/${REDHATREPO} is missing."
    [ "${CERTERROR}" -eq 1 ] && echo "Entitlement certificate(s) missing."

    [ "${SUBSERROR}" -eq 1 -o "${REPOERROR}" -eq 1 -o "${CERTERROR}" -eq 1 ] && exit 1

    return 0
}

initialise() {
    if [ "${subscribed}" -ne 1 ]; then
        echo "The configuration is not set to subscribe to Red Hat. Nothing to do here. Set the \"subscribed\" option in ${CONFIG} otherwise you are good to go."
        return 0
    fi

    SMSTATUS=$(subscription-manager status|grep 'Overall Status'|awk '{print $NF}')
    if [ "${SMSTATUS}" != "${ISREGISTERED}" ]; then
        read -p "Red Hat username: " USERNAME
        read -s -p "Red Hat password: " PASSWORD
        echo
        echo "Attempting to register the system using the provided credentials..."
        subscription-manager register --username=${USERNAME} --password=${PASSWORD} && subscription-manager attach --auto
        [ "$?" -ne 0 ] && exit 1
        echo "System registration successful."
    fi

    echo "Preparing master repo configuration."
    configure_redhat_repo
}

update_lock_error() {
    echo "Another update process has a lock on $1."
    exit 1
}

genrepo_lock_error() {
    echo "An update or createrepo process has a lock on $1."
    exit 1
}

lock_yum() {
    if [ -f "${YUMLOCKFILE}" ]; then
        _PID=$(head -1 ${YUMLOCKFILE})
        if [ ! -z "${_PID}" -a "$$" -ne "${_PID}" ]; then
            echo "Error: Another yum process is running."
            return 1
        fi
    else
        exec 1003> ${YUMLOCKFILE} && flock -w 10 -n 1003
        if [ "$?" -ne 0 ]; then
            echo "Error: Could not lock yum."
            return 1
        else
            echo $$ > ${YUMLOCKFILE}
            return 0
        fi
    fi
}

unlock_yum() {
    if [ -f "${YUMLOCKFILE}" ]; then
        _PID=$(head -1 ${YUMLOCKFILE})
        if [ ! -z "${_PID}" -a "$$" -eq "${_PID}" ]; then
            flock -u 1003
            \rm -f ${YUMLOCKFILE} &>/dev/null
        fi
    fi
}

spacewalk_enable() {
    _DISTRO=$1
    _REG=$2
    _MOUNTOPTS="loop"

    [ -z "${_REG}" ] && _MOUNTOPTS="${_MOUNTOPTS},ro"

    lock_yum || return 1

    if [ ! -f "${confdir}/${_DISTRO}.swk" ]; then
        echo "Error: Could not find Spacewalk registration info for ${_DISTRO}."
        return 1
    fi

    mount -o ${_MOUNTOPTS} ${confdir}/${_DISTRO}.swk ${RHNSYSCONFIGDIR} &>/dev/null
    if [ "$?" -ne 0 ]; then
        echo "Error in Spacewalk handler for ${_DISTRO}."
        return 1
    fi
    return 0
}

spacewalk_cleanup() {
    mount | grep -q ${RHNSYSCONFIGDIR} && while true; do umount -l ${RHNSYSCONFIGDIR} &>/dev/null || break; done
    _LOOPDEVS=$(losetup -a|grep '\.swk)'|cut -d: -f1)
    [ ! -z "${_LOOPDEVS}" ] && losetup -d ${_LOOPDEVS}

    unlock_yum
}

update_repo() {
    _REPODIR=$1
    _REPOID=$2
    _DISTRO=$3
    _ARCH=$4
    _ARCHOPTS="-a ${_ARCH}"
    _RELEASEVER=$5
    _SYNCALL="-n"
    _QUIET="-q"
    _VERBOSE=""
    _YUMCONF=""
    _SWALK=0

    echo ${_ARCH}|grep -q 'i[3-6]86' && _ARCHOPTS=""

    if [ "${VERBOSE}" -eq 1 ]; then
        _VERBOSE="-v"
        _QUIET=""
    fi
    [ "${SYNCALL}" -eq 1 ] && _SYNCALL=""

    [ ! -z "${yumconf}" ] && _YUMCONF="-c ${yumconf}"

    if [ ! -z "${freezerepo}" ]; then
        echo ${_REPODIR} | egrep -q "$(echo ${freezerepo} | sed -r 's/[ ,]+/|/g')"
        if [ "$?" -eq 0 ]; then
            [ "${VERBOSE}" -eq 1 ] && echo "Skipping frozen repo ${_REPODIR}."
            return 0
        fi
    fi

    _LOCKFILE="${LOCKDIR}/${_DISTRO}-${_REPODIR}.lock"
    _DESTDIR="${rootdir}/${_DISTRO}/${_REPODIR}"

    if [ ! -d "${_DESTDIR}" ]; then
        mkdir -p "${_DESTDIR}" &> /dev/null
        if [ "$?" -ne 0 ]; then
            echo "Error creating package repository ${_DESTDIR}."
            return 1
        fi
    fi

    if [ "${_REPOID:0:${#LOCALMARKER}}" == "${LOCALMARKER}" ]; then
        _SOURCEDIR=${_REPOID#${LOCALMARKER}}
        if [ ! -L "${_DESTDIR}" ]; then
            [ -d "${_DESTDIR}" ] && return 0
            [ "${_VERBOSE}" != "" ] && echo "Creating symlink for local source ${_SOURCEDIR}."
            \ln -s ${_SOURCEDIR} ${_DESTDIR} &> /dev/null
            if [ "$?" -ne 0 ]; then
                echo "Error creating symlink for local source ${_SOURCEDIR}."
                return 1
            fi
        elif [ ! -e "${_DESTDIR}" ]; then
            echo "Broken symlink found: ${_DESTDIR}."
            return 1
        fi
        return
    elif [ "${_REPOID:0:${#SPACEWALKMARKER}}" == "${SPACEWALKMARKER}" ]; then
        IFS=: read -ra _REPOSPEC <<<${_REPOID}
        _REPOID=${_REPOSPEC[1]}
        spacewalk_enable ${_DISTRO} || return 1
        _SWALK=1
    fi

    (
    flock -w ${LOCKWAIT} 1001 || update_lock_error ${_DESTDIR}
    [ "${_SWALK}" -eq 1 ] || YUM0=${_RELEASEVER} YUM1=${_ARCH} yum ${_YUMCONF} --disablerepo=* --enablerepo=${_REPOID} clean metadata &> /dev/null
    YUM0=${_RELEASEVER} YUM1=${_ARCH} reposync ${_QUIET} ${_YUMCONF} ${_SYNCALL} -r ${_REPOID} ${_ARCHOPTS} -p ${_DESTDIR} --norepopath -l -m --download-metadata
    [ "${_SWALK}" -eq 1 ] && spacewalk_cleanup
    ) 1001> ${_LOCKFILE}
}

download_package() {
    _REPODIR=$1
    _REPOID=$2
    _DISTRO=$3
    _ARCH=$4
    _RELEASEVER=$5
    _PACKAGES="${6//,/ }"
    _QUIET="-q"
    _VERBOSE=""
    _YUMCONF=""
    _SWALK=0

    echo ${_ARCH}|grep -q 'i[3-6]86' && _ARCHOPTS=""

    if [ "${VERBOSE}" -eq 1 ]; then
        _VERBOSE="-v"
        _QUIET=""
    fi

    [ ! -z "${yumconf}" ] && _YUMCONF="-c ${yumconf}"

    if [ ! -z "${freezerepo}" ]; then
        echo ${_REPODIR} | egrep -q "$(echo ${freezerepo} | sed -r 's/[ ,]+/|/g')"
        if [ "$?" -eq 0 ]; then
            [ "${VERBOSE}" -eq 1 ] && echo "Skipping frozen repo ${_REPODIR}."
            return 0
        fi
    fi

    _LOCKFILE="${LOCKDIR}/${_DISTRO}-${_REPODIR}.lock"
    _DESTDIR="${rootdir}/${_DISTRO}/${_REPODIR}"

    if [ ! -d "${_DESTDIR}" ]; then
        mkdir -p "${_DESTDIR}" &> /dev/null
        if [ "$?" -ne 0 ]; then
            echo "Error creating package repository ${_DESTDIR}."
            return 1
        fi
    fi

    if [ "${_REPOID:0:${#LOCALMARKER}}" == "${LOCALMARKER}" ]; then
        [ "${VERBOSE}" -eq 1 ] && echo "Package select option not applicable to local repos."
        return 1
    elif [ "${_REPOID:0:${#SPACEWALKMARKER}}" == "${SPACEWALKMARKER}" ]; then
        echo "Feature not supported for Spacewalk channels."
        return 1
    fi

    (
    flock -w ${LOCKWAIT} 1001 || update_lock_error ${_DESTDIR}
    YUM0=${_RELEASEVER} YUM1=${_ARCH} yum ${_YUMCONF} --disablerepo=* --enablerepo=${_REPOID} clean metadata &> /dev/null
    _BASEDIR=$(basename $(YUM0=${_RELEASEVER} YUM1=${_ARCH} yum ${_YUMCONF} --disablerepo=* -v repolist ${_REPOID}|grep '^Repo-baseurl'|awk '{print $3}'))
    if [ ! -z "${_BASEDIR}" -a "$?" -eq 0 ]; then
        declare -A _PKGS
        _PKGLIST=$(YUM0=${_RELEASEVER} YUM1=${_ARCH} yumdownloader -q ${_YUMCONF} --disablerepo=* --enablerepo=${_REPOID} --resolve --urls ${_PACKAGES}|grep '\.rpm$')
        for _PKG in ${_PKGLIST}; do
            _PKGS["$(dirname ${_PKG##*/${_BASEDIR}/})"]+="$(basename ${_PKG%.rpm}) "
        done
        for _PKGDIR in "${!_PKGS[@]}"; do
            YUM0=${_RELEASEVER} YUM1=${_ARCH} yumdownloader ${_YUMCONF} ${_QUIET} --disablerepo=* --enablerepo=${_REPOID} --destdir="${_DESTDIR}/${_PKGDIR}" ${_PKGS[${_PKGDIR}]}
        done
    fi
    ) 1001> ${_LOCKFILE}
}

gen_repodata() {
    _REPODIR=$1
    _REPOID=$2
    _DISTRO=$3
    _FORCE="-C --update"
    _VERBOSE=""
    _PROTECT=" "
    _PROTECTREPO=0

    [ "${FORCE}" -eq 1 ] && _FORCE=" "
    [ "${VERBOSE}" -eq 1 ] && _VERBOSE="-v"

    if [ ! -z "${freezerepo}" ]; then
        echo ${_REPODIR} | egrep -q "$(echo ${freezerepo} | sed -r 's/[ ,]+/|/g')"
        if [ "$?" -eq 0 ]; then
            [ "${VERBOSE}" -eq 1 ] && echo "Skipping frozen repo ${_REPODIR}."
            return 0
        fi
    fi

    if [ ! -z "${protect}" ]; then
        _PROTECT="$(echo ${protect} | sed -r 's/[ ,]+/|/g')"
    fi

    if [ "${SELECT}" -eq 1 ]; then
        _PROTECTREPO=1
    elif [ ! -z "${protectrepo}" ]; then
        echo ${_REPODIR} | egrep -q "$(echo ${protectrepo} | sed -r 's/[ ,]+/|/g')" && _PROTECTREPO=1
    fi

    _LOCKFILE="${LOCKDIR}/${_DISTRO}-${_REPODIR}.lock"
    _DESTDIR="${rootdir}/$_DISTRO/$_REPODIR"

    if [ ! -d "${_DESTDIR}" ]; then
        echo "Repository directory ${_DESTDIR} for ${_DISTRO} does not exist."
        return 1
    fi

    (
    flock -w ${LOCKWAIT} 1001 || genrepo_lock_error ${_DESTDIR}
    find ${_DESTDIR} -name '*.rpm' -empty -exec rm {} \;
    if [ "${_REPOID:0:${#LOCALMARKER}}" == "${LOCALMARKER}" -o "${_PROTECTREPO}" -eq 1 ]; then
        createrepo ${_FORCE} ${_VERBOSE} -s sha --simple-md-filenames --basedir ${_DESTDIR} -o ${_DESTDIR} ${_DESTDIR}
    else
        repomanage -c -o -k ${keep} ${_DESTDIR} | egrep -v "${_PROTECT}" | xargs rm -f
        createrepo ${_FORCE} ${_VERBOSE} -s sha --simple-md-filenames --basedir ${_DESTDIR} -o ${_DESTDIR} ${_DESTDIR}
    fi
    ) 1001> ${_LOCKFILE}

}

action() {
    if [ "${SELECT}" -eq 1 ]; then
        [ "${VERBOSE}" -eq 1 ] && echo "Downloading packages $6."
        download_package $1 $2 $3 $4 $5 $6
    fi

    if [ "${UPDATE}" -eq 1 ]; then
        [ "${VERBOSE}" -eq 1 ] && echo "Synchronising distro $3 repo $1."
        update_repo $1 $2 $3 $4 $5
    fi

    if [ "${GENREPO}" -eq 1 ]; then
        [ "${VERBOSE}" -eq 1 ] && echo "Generating repodata for distro $3 repo $1."
        gen_repodata $1 $2 $3
    fi
}

process_distro_repo() {
# TDISTRO -- target distro
# TREPO -- target repo

    if [ "${TDISTRO}" != "" ]; then
        if [ ! -f "${confdir}/${TDISTRO}.conf" ]; then
            echo "${TDISTRO} has no configuration"
            return 1
        else
            DISTROLIST="${TDISTRO}.conf"
        fi
    else
        DISTROLIST=$(for i in ${confdir}/*.conf; do basename $i; done)
    fi

    if [ "${DISTROLIST}" == "" ]; then
        if [ "${VERBOSE}" -eq 1 ]; then
            echo "Could not find any distribution configuration. Nothing to do here. Exiting."
        fi
        exit 0
    fi

    for DIST in ${DISTROLIST}; do
        unset releasever arch keep protect protectrepo freezerepo
        arch=${ARCH} keep=${KEEP} protect=${PROTECT} protectrepo=${PROTECTREPO} freezerepo=${FREEZEREPO}

        eval $(repoconf ${confdir}/${DIST})

        if [ "${#repostore[@]}" -eq 0 ]; then
            if [ "${VERBOSE}" -eq 1 ]; then
                echo "No repos defined for ${DIST%%\.conf}. Skipping..."
            fi
            continue
        fi

        NREPO=$(expr ${#repostore[@]} - 1)
        for i in $(seq 0 ${NREPO}); do
            if [ "${TREPO}" != "" ]; then
                if [ "${TREPO}" != "${repostore[$i]}" ]; then
                    continue
                else
                    _REPONAME=${reponame[$i]}
                    action ${TREPO} ${_REPONAME} ${DIST%%\.conf} ${arch} ${releasever} ${PACKAGE}
                    break
                fi
            else
                _REPO=${repostore[$i]}
                _REPONAME=${reponame[$i]}
                action ${_REPO} ${_REPONAME} ${DIST%%\.conf} ${arch} ${releasever} ${PACKAGE}
            fi
        done
    done
}

spacewalk_register() {
    _DISTRO=$1
    _KEY=$2

    if ! rpm -q --quiet rhn-client-tools; then
        echo "The rhn-client-tools modules are required to access Spacewalk. Try 'yum -y install rhn-client-tools'."
        exit 1
    fi

    if [ -f "${confdir}/${_DISTRO}.swk" ]; then
        read -p "A previous registration for this distro has been found. Continue?(y/N) " _OK
        if [ -z "${_OK}" ] || [[ "${_OK}" =~ [nN] ]]; then
            echo "Spacewalk registration cancelled."
            exit 0
        fi
    fi

    eval $(repoconf ${confdir}/${_DISTRO}.conf)
    _PROFILENAME="${HOSTNAME%%.*}-${_DISTRO}-dtmrepo"

    if [ -z "${_KEY}" ]; then
        read -p "Spacewalk username: " _USERNAME
        read -s -p "Spacewalk password: " _PASSWORD

        if [ -z "${_USERNAME}" -o -z "${_PASSWORD}" ]; then
            echo "Spacewalk username and password are required if activation key is not supplied."
            exit 1
        fi
    fi

    # prepare spacewalk custom filesystem
    # first, make sure there are no stale loop devices associated with this file
    _LOOPDEV=$(losetup -j ${confdir}/${_DISTRO}.swk 2>/dev/null | cut -d: -f1)
    [ ! -z "${_LOOPDEV}" ] && losetup -d ${_LOOPDEV}

    # now create the tiny filesystem
    dd if=/dev/zero of="${confdir}/${_DISTRO}.swk" bs=4M count=1 &>/dev/null && sync
    losetup -f ${confdir}/${_DISTRO}.swk
    _LOOPDEV=$(losetup -j ${confdir}/${_DISTRO}.swk | cut -d: -f1)
    if [ -z "${_LOOPDEV}" ]; then
        echo "Could not find a free loop device. Aborting."
        exit 1
    fi
    mkfs -t ext4 ${_LOOPDEV} &>/dev/null

    # copy up2date configs
    _MNTDIR=$(mktemp -d)
    mount ${_LOOPDEV} ${_MNTDIR}
    if [ "$?" -ne 0 ]; then
        echo "Error mounting loop device ${_LOOPDEV}. Aborting."
        losetup -d ${_LOOPDEV}
        exit 1
    fi
    rsync -a ${RHNSYSCONFIGDIR}/ ${_MNTDIR}
    pushd ${_MNTDIR} &>/dev/null
    \rm -f systemid &>/dev/null
    sed -i "s/versionOverride=.*/versionOverride=${releasever}/" up2date
    popd &>/dev/null

    sync
    umount -l ${_MNTDIR} && \rm -r ${_MNTDIR}
    losetup -d ${_LOOPDEV}

    #attempt to register with Spacewalk
    spacewalk_enable ${_DISTRO} register

    python - <<REGISTER
import sys
sys.path.insert(-1, '/usr/share/rhn/')
from up2date_client import rhnreg

rhnreg.cfg['versionOverride'] = '%s' % "${releasever}"
try:
    systemid = rhnreg.registerSystem(username='%s'%"${_USERNAME}",password='%s'%"${_PASSWORD}", token='%s'%"${_KEY}", profileName='%s'%"${_PROFILENAME}")
    rhnreg.writeSystemId(systemid)
except:
    sys.stderr.write('Unknown error during system registration.\n')

REGISTER

    sync
    spacewalk_cleanup
}

############################################################
# program start

UPDATE=0
GENREPO=0
VERBOSE=0
FORCE=0
SYNCALL=0
SELECT=0
INITIALISE=0
AUTOFIX=0
PURGE=0
CLEANUP=0
ENROLL=0
KEY=""
REPO=""
REPOS=""
TREPO=""
DISTRO=""
DISTROS=""
TDISTRO=""
PACKAGE=""
OPTERR=1
OPTIND=1

unset http_proxy https_proxy ftp_proxy

while getopts 'acefgiuvxpd:k:r:s:' opt; do
    case "${opt}" in
        a)  SYNCALL=1
            ;;
        c)  CLEANUP=1
            ;;
        d)  DISTRO=${OPTARG}
            ;;
        e)  ENROLL=1
            ;;
        f)  FORCE=1
            ;;
        g)  GENREPO=1
            ;;
        i)  INITIALISE=1
            ;;
        k)  KEY=${OPTARG}
            ENROLL=1
            ;;
        r)  REPO=${OPTARG}
            ;;
        s)  PACKAGE=${OPTARG}
            SELECT=1
            GENREPO=1
            UPDATE=0
            ;;
        u)  [ "${SELECT}" -eq 0 ] && UPDATE=1
            ;;
        v)  VERBOSE=1
            ;;
        x)  AUTOFIX=1
            ;;
        p)  PURGE=1
            ;;
        \?)
            usage
            ;;
    esac
done

if [ "${SELECT}" -eq 1 -a -z "${REPO}" ]; then
    echo "Specify the repos (-r) when downloading packages (-s). Exiting."
    exit 1
fi

eval $(readconf $CONFIG global)
ARCH=${arch} KEEP=${keep} PROTECT=${protect} PROTECTREPO=${protectrepo} FREEZEREPO=${freezerepo}

eval $(readconf ${yumconf} main)
REPOSDIR=${reposdir}

spacewalk_cleanup
trap spacewalk_cleanup 0 1 2 3 6 15

if [ "${ENROLL}" -eq 1 ]; then
    if [ -z "${DISTRO}" ]; then
        echo "Specify the distro (-d option) to register with Spacewalk."
        exit 1
    fi

    # register with spacewalk
    # avoid complications and ignore other options
    spacewalk_register "${DISTRO}" "${KEY}"

    exit 0
fi

[ "${INITIALISE}" -eq 1 ] && initialise

if [ "${AUTOFIX}" -eq 1 ]; then
    if [ "${subscribed}" -eq 1 ]; then
        ls ${ENTITLEMENTCERTDIR}/*.pem &> /dev/null
        if [ "$?" -ne 0 ]; then
            fix_cert
        fi

        _NEWCERT=$(find ${ENTITLEMENTCERTDIR} -newer ${YUMREPOSDIR}/${REDHATREPO} 2>/dev/null)
        if [ ! -e "${YUMREPOSDIR}/${REDHATREPO}" -o ! -z "${_NEWCERT}" ]; then
            echo "Updating redhat repo."
            configure_redhat_repo
        fi

        [ ! -z "${REPOSDIR}" -a ! -L "${REPOSDIR}/${REDHATREPO}" ] && ln -sf ${YUMREPOSDIR}/${REDHATREPO} ${REPOSDIR}/${REDHATREPO}
    fi
elif [ "${CLEANUP}" -eq 1 ]; then
    sanity_check
    yum-config-manager -c ${yumconf} --disable \* &> /dev/null
else
    sanity_check
fi

[ "${DISTRO}" != "" ] && DISTROS="${DISTRO//,/ }"
[ "${REPO}" != "" ] && REPOS="${REPO//,/ }"

if [ "${PURGE}" == 1 ]; then
    _DISTROLIST=""
    if [ -z "${DISTROS}" ]; then
        _DISTROLIST=$(for i in ${confdir}/*.conf; do basename $i; done)
    else
        _DISTROLIST=${DISTROS// /.conf }.conf
    fi
    for _DIST in ${_DISTROLIST}; do
        eval $(repoconf ${confdir}/${_DIST})
        _REPOS=$(ls ${rootdir}/${_DIST%%\.conf}/)
        if [ "${#_REPOS[@]}" != 0 ]; then
            for _REPO in ${_REPOS}; do
                _FOUND=0
                for _ACTIVE in ${repostore[@]}; do
                    if [ "${_REPO}" == "${_ACTIVE}" ]; then
                        _FOUND=1
                        break
                    fi
                done
                [ "${_FOUND}" == 0 ] && \rm -r ${rootdir}/${_DIST%%\.conf}/${_REPO}
            done
        fi
    done
fi

[ "${UPDATE}" != 1 -a "${GENREPO}" != 1 -a "${SELECT}" != 1 ] && exit 0

if [ -z "${DISTROS}" ]; then
    if [ -z "${REPOS}" ]; then
        process_distro_repo
    else
        for TREPO in ${REPOS}; do
            process_distro_repo
        done
    fi
else
    for TDISTRO in ${DISTROS}; do
        if [ -z "${REPOS}" ]; then
            process_distro_repo
        else
            for TREPO in ${REPOS}; do
                process_distro_repo
            done
        fi
    done
fi
